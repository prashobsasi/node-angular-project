'use strict';

const config = require('config');

const TIME_OUT_THRESHOLD = 100 - config.thresholds.connector.timeout;
const ERROR_THRESHOLD = 100 - config.thresholds.connector.error;

const ClientBuilder = require('./client');

const helper = require('./helpers');
const rnd = helper.rnd;

const connectedDBs = new Set();
const callbacksRegistry = new Map();

function connect(conStr, callback) {

  if (connectedDBs.has(conStr)) {
    return callback(new Error('Already connected to ' + conStr));
  }

  connectedDBs.add(conStr);

  if (rnd(0, 100) > TIME_OUT_THRESHOLD) {
    return setTimeout(callback.bind(null, new Error('Connection timeout for ' + conStr)), rnd(1000, 3000));
  }

  if (rnd(0, 100) > ERROR_THRESHOLD) {
    return setTimeout(callback.bind(null, new Error('Connection error for ' + conStr)), rnd(1000, 2000));
  }


  var client = ClientBuilder(conStr);
  var done = function (cl) {
    if (!callbacksRegistry.has(done)) {
      console.error('\u2620; done() called more than once');
      process.exit(2);
    }

    if (!cl) {
      console.error('\u2620; done() called without client');
      process.exit(3);
    }

    let savedClient = callbacksRegistry.get(done);

    if (savedClient !== cl) {
      console.error('\u2620; done() called with wrong client');
      process.exit(4);
    }

    connectedDBs.delete(conStr);
    callbacksRegistry.delete(done);

  };

  callbacksRegistry.set(done, client);

  setTimeout(callback.bind(null, null, client, done), rnd(200, 1000));

}

module.exports = {
  connect,
  callbacksRegistry
};
